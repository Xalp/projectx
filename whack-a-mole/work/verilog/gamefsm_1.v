/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gamefsm_1 (
    input clk,
    input rst,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input b1_press,
    input b2_press,
    input b3_press
  );
  
  
  
  reg [2:0] a;
  
  reg [2:0] b;
  
  reg [5:0] alufn;
  
  reg [15:0] alu;
  
  wire [16-1:0] M_alumod_alu;
  wire [1-1:0] M_alumod_z;
  wire [1-1:0] M_alumod_v;
  wire [1-1:0] M_alumod_n;
  reg [6-1:0] M_alumod_alufn;
  reg [16-1:0] M_alumod_a;
  reg [16-1:0] M_alumod_b;
  alu_5 alumod (
    .alufn(M_alumod_alufn),
    .a(M_alumod_a),
    .b(M_alumod_b),
    .alu(M_alumod_alu),
    .z(M_alumod_z),
    .v(M_alumod_v),
    .n(M_alumod_n)
  );
  
  reg [2:0] M_store_a_d, M_store_a_q = 1'h0;
  reg [2:0] M_store_b_d, M_store_b_q = 1'h0;
  reg [5:0] M_store_alufn_d, M_store_alufn_q = 1'h0;
  localparam IDLE_state = 2'd0;
  localparam CASE1_state = 2'd1;
  localparam CASE2_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = IDLE_state;
  wire [1-1:0] M_stateCOUNT_inc_state;
  stateCounter_6 stateCOUNT (
    .clk(clk),
    .rst(rst),
    .inc_state(M_stateCOUNT_inc_state)
  );
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_7 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_seg_values = 8'h00;
    a = 1'h0;
    b[2+0-:1] = b1_press;
    b[1+0-:1] = b2_press;
    b[0+0-:1] = b3_press;
    alufn = 1'h0;
    M_alumod_alufn = alufn;
    M_alumod_a = a;
    M_alumod_b = b;
    
    case (M_state_q)
      IDLE_state: begin
        if (M_stateCOUNT_inc_state == 1'h1) begin
          M_seg_values = 8'h01;
        end
      end
      CASE1_state: begin
        if (M_stateCOUNT_inc_state == 1'h1) begin
          M_seg_values = 8'h01;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_a_q <= 1'h0;
      M_store_b_q <= 1'h0;
      M_store_alufn_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_store_a_q <= M_store_a_d;
      M_store_b_q <= M_store_b_d;
      M_store_alufn_q <= M_store_alufn_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
