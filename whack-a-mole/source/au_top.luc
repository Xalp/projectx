module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    

    input b1_press,
    input b2_press,
    input b3_press,    
    output b1_light,
    output b2_light,
    output b3_light
    
    ) {
  
  sig rst;                  // reset signal
  gamefsm gameFsmInstance(.clk(clk),.rst(rst));

    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner b1_press_cond;
    button_conditioner b2_press_cond;
    button_conditioner b3_press_cond;
  }
  
    edge_detector buttondetector1(#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
    edge_detector buttondetector2(#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
    edge_detector buttondetector3(#RISE(1), #FALL(0),.clk(clk)); //detect on rising edge only
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = gameFsmInstance.io_seg;          // turn segments off
    io_sel = gameFsmInstance.io_sel;           // select no digits
    
    //conditioners. assigning the actual raw inputs from the breakout to the conditioners
    b1_press_cond.in = b1_press; 
    b2_press_cond.in = b2_press;
    b3_press_cond.in = b3_press;
    
    buttondetector1.in = b1_press_cond.out; 
    buttondetector2.in = b2_press_cond.out;
    buttondetector3.in = b3_press_cond.out;
      
    b1_light = buttondetector1.out;
    b2_light =0;
    b3_light =1;
    
    gameFsmInstance.b1_press = buttondetector1.out;
    gameFsmInstance.b2_press = buttondetector2.out;
    gameFsmInstance.b3_press = buttondetector3.out;
    
    io_led[0][0] = buttondetector1.out;
    io_led[0][2] = buttondetector2.out;  
    io_led[0][4] = buttondetector3.out;
  }
}